# Loads all the types of references in the database

CALL apoc.load.xml("file:///test.xml")
YIELD value

UNWIND [item in value._children] as entry

WITH entry,
	entry.key as key,
	entry.mdate as mdate,
	entry.publtype as publtype,
	entry.reviewid as reviewid,
	entry.rating as rating,
	entry.cdate as cdate,
	[item in entry._children WHERE item._type = "author"] AS authors,
	[item in entry._children WHERE item._type = "editor"] AS editors,
	[item in entry._children WHERE item._type = "title"][0] AS title,
	[item in entry._children WHERE item._type = "booktitle"][0] AS booktitle,
	[item in entry._children WHERE item._type = "pages"][0] AS pages,
	[item in entry._children WHERE item._type = "year"][0] AS year,
	[item in entry._children WHERE item._type = "address"][0] AS address,
	[item in entry._children WHERE item._type = "journal"] AS journals,
	[item in entry._children WHERE item._type = "year"][0] AS volume,
	[item in entry._children WHERE item._type = "year"][0] AS number,
	[item in entry._children WHERE item._type = "year"][0] AS month,
	[item in entry._children WHERE item._type = "url"][0] AS url,
	[item in entry._children WHERE item._type = "ee"][0] AS ee,
	[item in entry._children WHERE item._type = "cdrom"][0] AS cdrom,
	[item in entry._children WHERE item._type = "cite"] AS cites,
	[item in entry._children WHERE item._type = "publisher"][0] AS publisher,
	[item in entry._children WHERE item._type = "note"][0] AS note,
	[item in entry._children WHERE item._type = "crossref"][0] AS crossref,
	[item in entry._children WHERE item._type = "isbn"][0] AS isbn,
	[item in entry._children WHERE item._type = "series"][0] AS series,
	[item in entry._children WHERE item._type = "school"][0] AS school,
	[item in entry._children WHERE item._type = "chapter"][0] AS chapter,
	[item in entry._children WHERE item._type = "publnr"][0] AS publnr

CALL apoc.do.case([
	entry._type = "article","
					MERGE (a:Article {key: key})
					SET a.mdate = mdate
					SET a.publtype = publtype
					SET a.reviewid = reviewid
					SET a.rating = rating
					SET a.cdate = cdate
					RETURN a",
	entry._type = "inproceedings","
					MERGE (a:Inproceedings {key: key})
					SET a.mdate = mdate
					SET a.publtype = publtype
					SET a.cdate = cdate
					RETURN a",
	entry._type = "proceedings","
					MERGE (a:Proceedings {key: key})
					SET a.mdate = mdate
					SET a.publtype = publtype
					SET a.cdate = cdate
					RETURN a",
	entry._type = "book","
					MERGE (a:Book {key: key})
					SET a.mdate = mdate
					SET a.publtype = publtype
					SET a.cdate = cdate
					RETURN a",
	entry._type = "incollection","
					MERGE (a:Incollection {key: key})
					SET a.mdate = mdate
					SET a.publtype = publtype
					SET a.cdate = cdate
					RETURN a",
	entry._type = "phdthesis","
					MERGE (a:Phdthesis {key: key})
					SET a.mdate = mdate
					SET a.publtype = publtype
					SET a.cdate = cdate
					RETURN a",
	entry._type = "mastersthesis","
					MERGE (a:Mastersthesis {key: key})
					SET a.mdate = mdate
					SET a.publtype = publtype
					SET a.cdate = cdate
					RETURN a",
	entry._type = "www","
					MERGE (a:WWW {key: key})
					SET a.mdate = mdate
					SET a.publtype = publtype
					SET a.cdate = cdate
					RETURN a",
	entry._type = "person","
					MERGE (a:Person {key: key})
					SET a.mdate = mdate
					SET a.publtype = publtype
					SET a.cdate = cdate
					RETURN a",
	entry._type = "data","
					MERGE (a:Data {key: key})
					SET a.mdate = mdate
					SET a.publtype = publtype
					SET a.cdate = cdate
					RETURN a"],
	"MERGE(a:ERROR) RETURN a",
	{entry:entry, key:key, mdate:mdate, publtype:publtype, reviewid:reviewid, rating:rating, cdate:cdate}
)

YIELD value as a
WITH a.a AS a, authors, editors, title, booktitle, pages, year, address, journals, volume, number, month, url, ee, cdrom, cites, publisher, note, crossref, isbn, series, school, chapter, publnr

FOREACH(author in authors |
	MERGE (p:Person {name: author._text})
	MERGE (p)-[:author]->(a)
)


FOREACH (editor in editors |
	MERGE (p:Person {name: editor._text})
	MERGE (p)-[:editor]->(a)
)


SET a.title = title._text

SET a.booktitle = booktitle._text

SET a.pages = pages._text

MERGE (y:Year {value: year._text})
MERGE (a)-[:year]->(y)

//WIP
//MERGE (addr:Address {value: address._text})
//MERGE (a)-[:address]->(addr)

FOREACH(journal in journals |
	MERGE (j:Journal {name: journal._text})
	MERGE (j)-[:journal]->(a)
)

SET a.volume = volume._text

SET a.number = number._text

// month

SET a.url = url._text

SET a.ee = ee._text

SET a.cdrom = cdrom._text

// cites

// publisher

SET a.note = note._text

// crossref

SET a.isbn = isbn._text

SET a.series = series._text


// School

SET a.chapter = chapter._text

SET a.publnr = publnr._text


// WIP
//FOREACH(cite in cites |
//	MERGE (c:Citation {title: cite.label})
//	MERGE (a)-[:cite]->(c)
//)



# 1. Give the number of publications for each type

MATCH (n)
WHERE labels(n)[0] in ["Article", "Inproceedings", "Proceedings", "Book", "Incollection", "PHDThesis", "MasterThesis", "WWW"]
RETURN labels(n) as Type, count(n) as Number

MATCH (n:Publication)
RETURN labels(n)[0] as Type, count(n) as Number


# 2. Give the name of authors

MATCH (p:Person)-[:author]->()
RETURN p.name as Name

MATCH ()-[:authored_by]->(p:author)
RETURN DISTINCT p.author as Name


# 3. Give the names of authors who are also editors

MATCH ()<-[:editor]-(p:Person)-[:author]->()
RETURN p.name as Name


# 4. Give the authors ordered by the number of publications, in descending order

MATCH (p:Person)-[a:author]->()
WITH p, COUNT(a) as c
ORDER BY c DESC
RETURN p.name as Name


# 5. Give the authors and the number of publications for each type

MATCH (p:Person)-[:author]->(a)
RETURN p.name as Author, labels(a)[0] as Type, COUNT(a)
ORDER BY p.name


OPTIONAL MATCH (p:author)<-[:authored_by]-(a:article)
WITH p, COUNT(a) as ca

OPTIONAL MATCH (p)<-[:authored_by]-(b:inproceedings)
WITH p, ca, COUNT(b) as cb

OPTIONAL MATCH (p)<-[:authored_by]-(c:proceedings)
WITH p, ca, cb, COUNT(c) as cc

OPTIONAL MATCH (p)<-[:authored_by]-(d:book)
WITH p, ca, cb, cc, COUNT(d) as cd

OPTIONAL MATCH (p)<-[:authored_by]-(e:incollection)
WITH p, ca, cb, cc, cd, COUNT(e) as ce

OPTIONAL MATCH (p)<-[:authored_by]-(f:phdthesis)
WITH p, ca, cb, cc, cd, ce, COUNT(f) as cf

OPTIONAL MATCH (p)<-[:authored_by]-(g:mastersthesis)
WITH p, ca, cb, cc, cd, ce, cf, COUNT(g) as cg

OPTIONAL MATCH (p)<-[:authored_by]-(h:www)
WITH p, ca, cb, cc, cd, ce, cf, cg, COUNT(h) as ch

RETURN p.author as Author, ca as Article, cb as Inproceedings,
cc as Proceedings, cd as Book, ce as Incollection, cf as PHDThesis,
cg as MastersThesis, ch as WWW


# 6. Give the author(s) having the highest number of publications

MATCH (p:Person)-[a:author]->()
WITH p, COUNT(a) as c
WITH max(c) as m
MATCH (p:Person)-[a:author]->()
WITH p, COUNT(a) as c, m
WHERE c = m
RETURN p.name as Name


7. Give for each author the total number of publications and the number of publications by type

OPTIONAL MATCH (p:author)<-[:authored_by]-(a:article)
WITH p, COUNT(a) as ca

OPTIONAL MATCH (p)<-[:authored_by]-(b:inproceedings)
WITH p, ca, COUNT(b) as cb

OPTIONAL MATCH (p)<-[:authored_by]-(c:proceedings)
WITH p, ca, cb, COUNT(c) as cc

OPTIONAL MATCH (p)<-[:authored_by]-(d:book)
WITH p, ca, cb, cc, COUNT(d) as cd

OPTIONAL MATCH (p)<-[:authored_by]-(e:incollection)
WITH p, ca, cb, cc, cd, COUNT(e) as ce

OPTIONAL MATCH (p)<-[:authored_by]-(f:phdthesis)
WITH p, ca, cb, cc, cd, ce, COUNT(f) as cf

OPTIONAL MATCH (p)<-[:authored_by]-(g:mastersthesis)
WITH p, ca, cb, cc, cd, ce, cf, COUNT(g) as cg

OPTIONAL MATCH (p)<-[:authored_by]-(h:www)
WITH p, ca, cb, cc, cd, ce, cf, cg, COUNT(h) as ch

WITH p, ca, cb, cc, cd, ce, cf, cg, ch, ca+cb+cd+ce+cf+cg+ch as Total

RETURN p.author as Author, ca as Article, cb as Inproceedings,
cc as Proceedings, cd as Book, ce as Incollection, cf as PHDThesis,
cg as MastersThesis, ch as WWW, Total



8. Give the list of proceedings that have at least one editor that is also author of at least one article in the proceedings



9. Give for each author the number of co-authors and the number of joint publications with each of them



10. Give the distance of author "Hector Garcia-Molina" with respect to other authors. Two authors that write together a publication have distance 0. If an author a write a publication with author b and if author b write a publication with author c, then a is at distance 1 from c if a and c have not published together






